{"ast":null,"code":"import _classCallCheck from \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/src/public/components/NavBar.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux'; // import Header from './NavBar/Index';\n\nimport Logo from './NavBar/Logo';\nimport Navigation from './NavBar/Navigation';\nimport Search from './NavBar/Search';\nimport UserProfile from './NavBar/UserProfile';\n\nvar NavBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NavBar, _Component);\n\n  function NavBar(props) {\n    var _this;\n\n    _classCallCheck(this, NavBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NavBar).call(this, props)); // this.toggle = this.toggle.bind(this);\n\n    _this.state = {\n      isOpen: false,\n      toHome: false,\n      search: '',\n      toSearch: false\n    };\n    return _this;\n  }\n\n  _createClass(NavBar, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.location.pathname === \"/login\" || this.props.location.pathname === \"/register\") {\n        return null;\n      }\n\n      if (this.state.toHome === true) {\n        return React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      }\n\n      if (this.state.toSearch === true) {\n        // const route = '/movies?search=' + this.state.search;\n        return React.createElement(Redirect, {\n          to: \"/movies?search=\" + this.state.search,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"header\", {\n        className: \"Header\",\n        style: {\n          marginBottom: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Logo, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(Navigation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(Search, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(UserProfile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NavBar;\n}(Component);\n\nvar mapsStateToProps = function mapsStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nexport default withRouter(connect(mapsStateToProps, null)(NavBar));","map":{"version":3,"sources":["/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/src/public/components/NavBar.js"],"names":["React","Component","withRouter","Redirect","connect","Logo","Navigation","Search","UserProfile","NavBar","props","state","isOpen","toHome","search","toSearch","location","pathname","marginBottom","mapsStateToProps","auth"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;IAEMC,M;;;;;AACF,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gFAAMA,KAAN,GADe,CAGf;;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,MAAM,EAAE,KAFC;AAGTC,MAAAA,MAAM,EAAE,EAHC;AAITC,MAAAA,QAAQ,EAAE;AAJD,KAAb;AAJe;AAUlB;;;;6BAEQ;AACL,UAAG,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,QAApB,KAAiC,QAAjC,IAA6C,KAAKP,KAAL,CAAWM,QAAX,CAAoBC,QAApB,KAAiC,WAAjF,EAA6F;AACzF,eAAO,IAAP;AACH;;AAED,UAAI,KAAKN,KAAL,CAAWE,MAAX,KAAsB,IAA1B,EAAgC;AAC5B,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AACD,UAAI,KAAKF,KAAL,CAAWI,QAAX,KAAwB,IAA5B,EAAkC;AAC9B;AACA,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE,oBAAoB,KAAKJ,KAAL,CAAWG,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,aAEI;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAA2B,QAAA,KAAK,EAAE;AAAEI,UAAAA,YAAY,EAAE;AAAhB,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAFJ;AASH;;;;EAnCgBjB,S;;AAsCrB,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACR,KAAD;AAAA,SAAY;AACjCS,IAAAA,IAAI,EAAET,KAAK,CAACS;AADqB,GAAZ;AAAA,CAAzB;;AAIA,eAAelB,UAAU,CAACE,OAAO,CAACe,gBAAD,EAAmB,IAAnB,CAAP,CAAgCV,MAAhC,CAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom'\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\n\n// import Header from './NavBar/Index';\nimport Logo from './NavBar/Logo';\nimport Navigation from './NavBar/Navigation';\nimport Search from './NavBar/Search';\nimport UserProfile from './NavBar/UserProfile';\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n\n        // this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false,\n            toHome: false,\n            search: '',\n            toSearch: false,\n        };\n    }\n\n    render() {\n        if(this.props.location.pathname === \"/login\" || this.props.location.pathname === \"/register\"){\n            return null\n        }\n\n        if (this.state.toHome === true) {\n            return <Redirect to=\"/\" />\n        }\n        if (this.state.toSearch === true) {\n            // const route = '/movies?search=' + this.state.search;\n            return <Redirect to={`/movies?search=` + this.state.search} />\n        }\n\n        return (\n\n            <header className=\"Header\" style={{ marginBottom: 100 }}>\n                <Logo />\n                <Navigation />\n                <Search />\n                <UserProfile />\n            </header>\n        );\n    }\n}\n\nconst mapsStateToProps = (state) => ({\n    auth: state.auth\n})\n\nexport default withRouter(connect(mapsStateToProps, null)(NavBar));"]},"metadata":{},"sourceType":"module"}