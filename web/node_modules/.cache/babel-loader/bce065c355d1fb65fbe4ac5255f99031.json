{"ast":null,"code":"import _objectSpread from \"/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  movie: [],\n  lastPage: 0,\n  isLoading: false,\n  isFinish: false,\n  isError: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // case login\n    case \"FETCH_ALL_PENDING\":\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case \"FETCH_ALL_FULFILLED\":\n      return _objectSpread({}, state, {\n        isLoading: false,\n        isFinish: true,\n        lastPage: action.payload.data.lastPage,\n        movie: action.payload.data.data\n      });\n\n    case \"FETCH_ALL_REJECTED\":\n      return _objectSpread({}, state, {\n        isError: true,\n        isLoading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/sumirart/NETFLIXCLONE-NEW/Boilerplate-Iflix-Web-Clone-With-React/src/public/redux/reducers/movie.js"],"names":["initialState","movie","lastPage","isLoading","isFinish","isError","state","action","type","payload","data"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,QAAQ,EAAE,CAFO;AAGjBC,EAAAA,SAAS,EAAE,KAHM;AAIjBC,EAAAA,QAAQ,EAAE,KAJO;AAKjBC,EAAAA,OAAO,EAAE;AALQ,CAArB;AASA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAK,mBAAL;AACI,+BACOF,KADP;AACcH,QAAAA,SAAS,EAAE;AADzB;;AAIJ,SAAK,qBAAL;AACI,+BACOG,KADP;AAEIH,QAAAA,SAAS,EAAE,KAFf;AAEsBC,QAAAA,QAAQ,EAAE,IAFhC;AAGIF,QAAAA,QAAQ,EAAEK,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBR,QAHlC;AAIID,QAAAA,KAAK,EAAEM,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBA;AAJ/B;;AAOJ,SAAK,oBAAL;AACI,+BACOJ,KADP;AACcD,QAAAA,OAAO,EAAE,IADvB;AAC6BF,QAAAA,SAAS,EAAE;AADxC;;AAIJ;AACI,aAAOG,KAAP;AArBR;AAuBH,CAxBD","sourcesContent":["const initialState = {\n    movie: [],\n    lastPage: 0,\n    isLoading: false,\n    isFinish: false,\n    isError: false\n}\n\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        // case login\n        case \"FETCH_ALL_PENDING\":\n            return {\n                ...state, isLoading: true\n            }\n\n        case \"FETCH_ALL_FULFILLED\":\n            return {\n                ...state,\n                isLoading: false, isFinish: true,\n                lastPage: action.payload.data.lastPage,\n                movie: action.payload.data.data\n            }\n\n        case \"FETCH_ALL_REJECTED\":\n            return {\n                ...state, isError: true, isLoading: false\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}